# the number of bits set to 0 or 1 of an output is correlated with the power consumption of a device.
# the goal of the Hamming Weight Power Model attack is to predict the number of bits set to 1 in the S-box output

import json
from scipy import stats
from Crypto.Cipher import AES
import matplotlib.pyplot as plt

f = open('traces.json', 'r')
data = json.load(f)


def hamming(intermediate_value):
    return bin(intermediate_value).count("1")


# AES precomputed S-box table

sbox = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7,
    0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF,
    0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5,
    0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
    0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E,
    0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED,
    0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF,
    0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF,
    0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D,
    0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE,
    0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5,
    0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E,
    0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E,
    0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55,
    0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F,
    0xB0, 0x54, 0xBB, 0x16,
]

array_of_hammings = []
plaintexts = []
ciphertexts = []
measurements = []
intermediate_correlations = []
final_correlations = []

for data_index in range(len(data)):
    plaintexts.append(data[data_index]['pt'])
    ciphertexts.append(data[data_index]['ct'])
    measurements.append(data[data_index]['pm'])


def calculateCorrelation(b_idx, b_key):
    intermediate_correlations.clear()
    array_of_hammings.clear()
    # Creates an array of hamming distances for a given byte_index (0-15), subkey (0x00-0xff) across all plaintexts (50 pl/ct w/ 1806 samples each)
    for plaintext in plaintexts:
        addkey_output = plaintext[b_idx] ^ b_key
        sbox_output = sbox[addkey_output]
        array_of_hammings.append(hamming(sbox_output))
    # Creates 1806x 50 element arrays for each byte key guess (0x00-0xff)
    # Each of the 1806 arrays is calculated across all samples of all plaintexts
    # Each of the 1806 arrays returns max(abs(correlation array))
    for measurement_index in range(len(measurements[0])):
        m = [measurement[measurement_index] for measurement in measurements]
        coefficient = stats.pearsonr(array_of_hammings, m)
        intermediate_correlations.append(abs(coefficient[0]))
    # Po skonceni predchozi for smycky, ma pole intermediate_correlations 1806 hodnot
    # max hodnota z intermediate_correlations je key byte s nejvyssim korelacnim koeficientem
    final_correlations.append(max(intermediate_correlations))


# for byte_index in range(16):
#     for key_byte in range(256):
#         calculateCorrelation(byte_index, key_byte)
#     maximum = max(final_correlations)
#     for idx, value in enumerate(final_correlations):
#         if value == maximum:
#             print("Byte index: {} - Key byte value: 0x{:02X} - Correlation coefficient: {:.5f}".format(byte_index, idx,
#                                                                                                        value))
#     final_correlations.clear()

# key_h = "5730636B41776F634B61576F436B6131"
# key = bytes([0x57, 0x30, 0x63, 0x6B, 0x41, 0x77, 0x6F, 0x63, 0x4B, 0x61, 0x57, 0x6F, 0x43, 0x6B, 0x61, 0x31])
ciphertext_h = "111f144c62f296fcdade00be0f3e3cbb"
# ciphertext = bytes.fromhex(ciphertext_h)
# cipher = AES.new(key, AES.MODE_ECB)
# msg = cipher.decrypt(ciphertext)
# print(msg)

# print(key_a)
# Visualize the result
# x = [range(256)]
# y = [0.5144798137622282, 0.5279636346091328, 0.45744292509604684, 0.5872421653580967, 0.44084589269098495,
#      0.45964960069873617, 0.4249772446977268, 0.46598029455022516, 0.5149436826738737, 0.4337870622995822,
#      0.4552928731831851, 0.4147981743304362, 0.47071790613241454, 0.438622014097127, 0.479477255152987,
#      0.5204500341988921, 0.49251423786589876, 0.4436690439657156, 0.48023726233704145, 0.5158383690028181,
#      0.5343487851607795, 0.5197318972973263, 0.5094361156389562, 0.46458930936928333, 0.44166971701361823,
#      0.4673854057479161, 0.5616931246219887, 0.44329005126924725, 0.4543589149677705, 0.4863162490408657,
#      0.5044765278493688, 0.47510611605867303, 0.49583500542282255, 0.5129126996229177, 0.49558969411179843,
#      0.47452921371068096, 0.415062585654681, 0.5073506817497986, 0.49894583055244096, 0.4771179779875099,
#      0.5109208811984592, 0.47167839500542197, 0.43259546424172723, 0.47220452690347015, 0.4991066177489912,
#      0.4718034654220838, 0.4179564237177915, 0.6191397749357117, 0.4519632529957969, 0.5020005888408652,
#      0.451934504734672, 0.4868365497896684, 0.506493342823785, 0.4796409322666745, 0.5109888070703237,
#      0.5603675608183987, 0.47286013663769216, 0.516556554194631, 0.4492140485359096, 0.49817789279707414,
#      0.5280611865433401, 0.43090933561539985, 0.4359253212645001, 0.4746289999531855, 0.5142490240064936,
#      0.5118798886858817, 0.50331744042371, 0.5050239309373218, 0.5002805174518228, 0.46373049439342373,
#      0.4741107390501739, 0.5412469184877973, 0.47186618280045456, 0.5310901857390954, 0.43218294040033844,
#      0.43589994799776277, 0.4953682374092431, 0.49546845039688514, 0.5135867370636731, 0.46634447284032776,
#      0.4663309965869978, 0.4919829754307771, 0.5250257019738835, 0.5252105062967909, 0.4827232667674667,
#      0.5740709630629353, 0.428697101740683, 0.7664977105152346, 0.470429192174793, 0.4713039522041073,
#      0.5162552394310183, 0.4959112724616053, 0.4808288344457425, 0.4486392839278579, 0.45457183198292395,
#      0.48992370405537916, 0.41319230421990677, 0.5051949288398683, 0.4707176864689325, 0.6290222788171218,
#      0.45404015896609407, 0.4895590267818345, 0.4399776200124904, 0.5465748664052023, 0.4557699593448074,
#      0.44877576038529576, 0.5346197899344498, 0.5392662879360999, 0.4332232392361877, 0.4434370888879663,
#      0.49602196070620086, 0.5395814018757155, 0.446273359102651, 0.5186265911012817, 0.46526398461987345,
#      0.5407335716559787, 0.5734640452260706, 0.4845241389865032, 0.46891151786030105, 0.5646153093600468,
#      0.4578157652490864, 0.5633243985593623, 0.49737407216382384, 0.4973145011213697, 0.5223158449531846,
#      0.4557657116560009, 0.4162540766748395, 0.45285504622986666, 0.49415782063226565, 0.4001708645749104,
#      0.4937529900965328, 0.5106195360958267, 0.5088605650686906, 0.4508723500350941, 0.5638190645645194,
#      0.5192869655923218, 0.45755766798335695, 0.45929494189682807, 0.5358773739588434, 0.4909353853971331,
#      0.4593903386373511, 0.6397814509191047, 0.4409290590086618, 0.46385159602867154, 0.4395436602191931,
#      0.4996181771679936, 0.5117779954453567, 0.44837918480642036, 0.49176288468896884, 0.5246885028645007,
#      0.4876493983227972, 0.47709080895824507, 0.4776289632047118, 0.4839705864967883, 0.45570769409092804,
#      0.5227395079957533, 0.47895115435791796, 0.4522430777862653, 0.4346154885905037, 0.4691418445988486,
#      0.45665033204953803, 0.4663421999931299, 0.43698632697886647, 0.45802066816068304, 0.40599782148306585,
#      0.5010348698526855, 0.48215961665251184, 0.4780191041589368, 0.487511323439318, 0.44766048693636395,
#      0.46096501951958396, 0.45714378181409776, 0.40946447535024055, 0.46552785424112775, 0.4918124193268827,
#      0.46697137855283444, 0.4796615277966749, 0.511780419997311, 0.46451175075057966, 0.5661721541216462,
#      0.4159675977710627, 0.4396123371575941, 0.46606486108522555, 0.4404424851726193, 0.5004698115407603,
#      0.512054949842713, 0.4842479774346871, 0.5013311033050085, 0.44194075441975633, 0.4724924840570349,
#      0.4638629120637334, 0.5188433364819606, 0.4615455495909303, 0.5326127476324151, 0.4683285909417195,
#      0.4903367782167166, 0.4193358672942218, 0.46267708869256163, 0.5288778223912345, 0.44790250372239504,
#      0.45101667732205103, 0.46415214417063744, 0.45576959943793016, 0.49669401335105345, 0.4626171554440944,
#      0.5176855304642862, 0.43900354499360633, 0.45493286660390714, 0.48556034322795466, 0.43316137186962583,
#      0.4832296112157757, 0.5092416556878597, 0.45987161033264656, 0.557579261051135, 0.44035097357628294,
#      0.49102578201125446, 0.4881251841170926, 0.5801088761303512, 0.45620452001872724, 0.5278249795552271,
#      0.43707244352621494, 0.4669615816428293, 0.5047777323331206, 0.43383429318279265, 0.5113780975095352,
#      0.43666596992130746, 0.46999968424720756, 0.5172915067367361, 0.4778706326286135, 0.4565759830208818,
#      0.49374640848286044, 0.5289301046366532, 0.4363585721619553, 0.47773772798553704, 0.4671718134181009,
#      0.5271553404352332, 0.46462424663478685, 0.46875056977424484, 0.44475717788495783, 0.47881880198964116,
#      0.4630450508900078, 0.4933480035256736, 0.5118734313847187, 0.4654749512184311, 0.4817798117203872,
#      0.5194613194877072, 0.4830831498977667, 0.4770345133246644, 0.44427909182823994, 0.49603535839572294,
#      0.5554378353358662, 0.4820419154645566, 0.4569366787696747, 0.4911578984454296, 0.39869476852870767,
#      0.4469385253573075]
# plt.figure(figsize=(16, 10), dpi=80, facecolor='w', edgecolor='k')
# plt.scatter(x, y, c="red")
# plt.gca().set(xlim=(0, 256), ylim=(0.0, 1.0), xlabel='Byte values of per-byte AES key guesses [-]',
#               ylabel='Pearson correlation coefficient [-]')
# plt.xticks(fontsize=12)
# plt.yticks(fontsize=12)
# plt.title("Correlation power analysis of AES-128 for secret key byte 0", fontsize=22)
# plt.show()
